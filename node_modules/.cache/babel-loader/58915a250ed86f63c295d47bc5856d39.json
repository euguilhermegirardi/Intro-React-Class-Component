{"ast":null,"code":"var _jsxFileName = \"/Users/girardi.gui/Desktop/ReactJS-Rocketseat/intro-reactjs-classcomponent/src/components/TechList.js\";\nimport React, { Component } from 'react';\nimport TechItem from './TechItem';\n\nclass TechList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newTech: '',\n      techs: []\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newTech: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        // get the state and add 'this.state.newTech' as the last item.\n        techs: [...this.state.techs, this.state.newTech],\n        // clean the input after submit.\n        newTech: ''\n      });\n    };\n\n    this.handleRemove = tech => {\n      this.setState({\n        techs: this.state.techs.filter(t => t !== tech)\n      });\n    };\n  }\n\n  // LIFECYCLE\n  // Executed as soon as the component appears on the screen.\n  componentDidMount() {} // Executed whenever the props or state change. (prevProps, prevState)\n\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.techs !== this.state.techs) {\n      localStorage.setItem('techs', JSON.stringify(this.state.techs));\n    }\n  } // Executed when component no longer exists.\n\n\n  componentWillUnmount() {} // arrow function to access the state.\n\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.state.techs.map(tech => React.createElement(TechItem, {\n      key: tech // to give all the information to \"TechItem.js\"\n      ,\n      tech: tech,\n      onRemove: () => this.handleRemove(tech),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }))), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleInputChange,\n      value: this.state.newTech,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Send\"));\n  }\n\n}\n\nexport default TechList;","map":{"version":3,"sources":["/Users/girardi.gui/Desktop/ReactJS-Rocketseat/intro-reactjs-classcomponent/src/components/TechList.js"],"names":["React","Component","TechItem","TechList","state","newTech","techs","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","handleRemove","tech","filter","t","componentDidMount","componentDidUpdate","_","prevState","localStorage","setItem","JSON","stringify","componentWillUnmount","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BG,KAD+B,GACvB;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,KAAK,EAAE;AAFD,KADuB;;AAAA,SAyB/BC,iBAzB+B,GAyBXC,CAAC,IAAI;AACvB,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAEG,CAAC,CAACE,MAAF,CAASC;AAApB,OAAd;AACD,KA3B8B;;AAAA,SA6B/BC,YA7B+B,GA6BhBJ,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACK,cAAF;AACA,WAAKJ,QAAL,CAAc;AACZ;AACAH,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,KAAf,EAAsB,KAAKF,KAAL,CAAWC,OAAjC,CAFK;AAGZ;AACAA,QAAAA,OAAO,EAAE;AAJG,OAAd;AAMD,KArC8B;;AAAA,SAuC/BS,YAvC+B,GAuCfC,IAAD,IAAU;AACvB,WAAKN,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,CAAiBU,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,KAAKF,IAAnC;AAAT,OAAd;AACD,KAzC8B;AAAA;;AAM/B;AACA;AACAG,EAAAA,iBAAiB,GAAG,CAEnB,CAV8B,CAY/B;;;AACAC,EAAAA,kBAAkB,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAC/B,QAAIA,SAAS,CAACf,KAAV,KAAoB,KAAKF,KAAL,CAAWE,KAAnC,EAA0C;AACxCgB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,KAAKrB,KAAL,CAAWE,KAA1B,CAA9B;AACD;AACF,GAjB8B,CAmB/B;;;AACAoB,EAAAA,oBAAoB,GAAG,CAEtB,CAtB8B,CAwB/B;;;AAmBAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKf,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKR,KAAL,CAAWE,KAAX,CAAiBsB,GAAjB,CAAqBb,IAAI,IACxB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,IADP,CAEE;AAFF;AAGE,MAAA,IAAI,EAAEA,IAHR;AAIE,MAAA,QAAQ,EAAE,MAAM,KAAKD,YAAL,CAAkBC,IAAlB,CAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF,EAUE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAE,KAAKR,iBAFjB;AAGE,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,OAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAeE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,CADF;AAmBD;;AA/D8B;;AAkEjC,eAAeF,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport TechItem from './TechItem';\n\nclass TechList extends Component {\n  state = {\n    newTech: '',\n    techs: [],\n  };\n\n  // LIFECYCLE\n  // Executed as soon as the component appears on the screen.\n  componentDidMount() {\n\n  }\n\n  // Executed whenever the props or state change. (prevProps, prevState)\n  componentDidUpdate(_, prevState) {\n    if (prevState.techs !== this.state.techs) {\n      localStorage.setItem('techs', JSON.stringify(this.state.techs))\n    }\n  }\n\n  // Executed when component no longer exists.\n  componentWillUnmount() {\n\n  }\n\n  // arrow function to access the state.\n  handleInputChange = e => {\n    this.setState({ newTech: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      // get the state and add 'this.state.newTech' as the last item.\n      techs: [...this.state.techs, this.state.newTech],\n      // clean the input after submit.\n      newTech: ''\n    })\n  };\n\n  handleRemove = (tech) => {\n    this.setState({ techs: this.state.techs.filter(t => t !== tech) })\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <ul>\n          {this.state.techs.map(tech =>\n            <TechItem\n              key={tech}\n              // to give all the information to \"TechItem.js\"\n              tech={tech}\n              onRemove={() => this.handleRemove(tech)}\n            />)}\n        </ul>\n        <input\n          type=\"text\"\n          onChange={this.handleInputChange}\n          value={this.state.newTech}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    );\n  }\n}\n\nexport default TechList;"]},"metadata":{},"sourceType":"module"}